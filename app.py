from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import requests
import urllib.parse
import os
import logging

# ===============================
# ЁЯФ░ LOGGING рж╕рзЗржЯржЖржк
# ===============================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# ===============================
# тЪЩя╕П ржмржЯ рж╕рзЗржЯрж┐ржВрж╕ тЪЩя╕П
# ===============================
BOT_TOKEN = "8297848554:AAHVX8--wtbap_NEC4bIyjKReJ8b4Z7ebgU"

PRIVATE_CHANNEL_ID = "-1002172050092"
PUBLIC_CHANNEL_ID = "@shadow_joker_cyberteamhelp"
PRIVATE_INVITE = "https://t.me/+DLEo8TQ1PjIzYzFl"
PUBLIC_LINK = "https://t.me/SHADOW_JOKER_CTH"

OWNER_ID = 6484972504

VIDEO_API_URL = "https://api.yabes-desu.workers.dev/ai/tool/txt2video"
IMAGE_API_URL = "https://text2img.hideme.eu.org/image"

# ===============================
# ЁЯПБ /start ржХржорж╛ржирзНржб
# ===============================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    keyboard = [
        [InlineKeyboardButton("тЬЕ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи", callback_data="verify")],
        [InlineKeyboardButton("ЁЯдЦ About Bot", callback_data="about")],
        [InlineKeyboardButton("ЁЯСе ржЖржорж╛ржжрзЗрж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи", url=PUBLIC_LINK)],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_html(
        f"""
ЁЯОЙ <b>рж╕рзНржмрж╛ржЧрждржо, {user.first_name}!</b>

тЪая╕П ржПржЗ ржмржЯржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЖржЧрзЗ ржЖржкржирж╛ржХрзЗ ржЕржмрж╢рзНржпржЗ ржЖржорж╛ржжрзЗрж░ ржжрзБржЯрж┐ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐рждрзЗ рж╣ржмрзЗ:

1я╕ПтГг ржкрж╛ржмрж▓рж┐ржХ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржи  
2я╕ПтГг ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржи  

ржЙржнрзЯ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрзЗржУрзЯрж╛рж░ ржкрж░ ржирж┐ржЪрзЗ <b>тЬЕ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи</b> ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред
""",
        reply_markup=reply_markup,
        disable_web_page_preview=True,
    )

# ===============================
# тЬЕ ржпрж╛ржЪрж╛ржЗ ржмрж╛ржЯржи
# ===============================
async def verify_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await query.answer("тМЫ ржЪрзНржпрж╛ржирзЗрж▓ ржпрж╛ржЪрж╛ржЗ рж╣ржЪрзНржЫрзЗ...", show_alert=False)

    try:
        private_member = await context.bot.get_chat_member(PRIVATE_CHANNEL_ID, user.id)
        public_member = await context.bot.get_chat_member(PUBLIC_CHANNEL_ID, user.id)

        if (
            private_member.status in ["member", "administrator", "creator"]
            and public_member.status in ["member", "administrator", "creator"]
        ):
            await query.message.edit_text(
                f"""
тЬЕ <b>ржпрж╛ржЪрж╛ржЗ рж╕ржлрж▓!</b>

рж╕рзНржмрж╛ржЧрждржо {user.first_name} ЁЯе│  

ржЖржкржирж┐ ржПржЦржи ржирж┐ржЪрзЗрж░ ржХржорж╛ржирзНржбржЧрзБрж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи:

ЁЯОе <code>/vid</code> ржЖржкржирж╛рж░ ржЯрзЗржХрзНрж╕ржЯ тЖТ ржнрж┐ржбрж┐ржУ рждрзИрж░рж┐  
ЁЯЦ╝я╕П <code>/flux</code> ржЖржкржирж╛рж░ ржЯрзЗржХрзНрж╕ржЯ тЖТ ржЫржмрж┐ рждрзИрж░рж┐  

ЁЯСС <b>ржорж╛рж▓рж┐ржХ:</b> SHADOW JOKER  
ЁЯФЧ <a href="{PUBLIC_LINK}">t.me/SHADOW_JOKER_CTH</a>
""",
                parse_mode="HTML",
            )
        else:
            await query.answer("тЭМ ржЖржкржирж╛ржХрзЗ ржЕржмрж╢рзНржпржЗ ржЙржнржпрж╝ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐рждрзЗ рж╣ржмрзЗ!", show_alert=True)
    except Exception as e:
        logging.error(f"ржЪрзНржпрж╛ржирзЗрж▓ ржпрж╛ржЪрж╛ржЗ рждрзНрж░рзБржЯрж┐: {e}")
        await query.answer("тЭМ ржпрж╛ржЪрж╛ржЗ ржмрзНржпрж░рзНрже! ржЪрзНржпрж╛ржирзЗрж▓ ID рж╕ржарж┐ржХ ржЖржЫрзЗ ржХрж┐ржирж╛ ржжрзЗржЦрзБржиред", show_alert=True)

# ===============================
# ЁЯдЦ About Bot
# ===============================
async def about_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [[InlineKeyboardButton("тмЕя╕П ржмрзНржпрж╛ржХ", callback_data="start_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        f"""
ЁЯМЯ <b>SHADOW BOT рж╕ржорзНржкрж░рзНржХрзЗ:</b>

ржПржЗ ржмржЯржЯрж┐ AI ржоржбрзЗрж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЯрзЗржХрзНрж╕ржЯ ржкрзНрж░ржорзНржкржЯ ржерзЗржХрзЗ ржжрзБрж░рзНржжрж╛ржирзНржд ржнрж┐ржбрж┐ржУ ржПржмржВ ржЫржмрж┐ рждрзИрж░рж┐ ржХрж░рждрзЗ ржкрж╛рж░рзЗред

ЁЯОе <b>ржнрж┐ржбрж┐ржУ ржоржбрзЗрж▓:</b> Sora-like  
ЁЯЦ╝я╕П <b>ржЫржмрж┐ ржоржбрзЗрж▓:</b> Flux  

ЁЯСС <b>ржорж╛рж▓рж┐ржХ:</b> SHADOW JOKER  
ЁЯФЧ <a href="{PUBLIC_LINK}">t.me/SHADOW_JOKER_CTH</a>
""",
        parse_mode="HTML",
        reply_markup=reply_markup,
    )

# ===============================
# ЁЯФЩ ржмрзНржпрж╛ржХ ржЯрзБ рж╕рзНржЯрж╛рж░рзНржЯ
# ===============================
async def back_to_start_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    keyboard = [
        [InlineKeyboardButton("тЬЕ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи", callback_data="verify")],
        [InlineKeyboardButton("ЁЯдЦ About Bot", callback_data="about")],
        [InlineKeyboardButton("ЁЯСе ржЖржорж╛ржжрзЗрж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи", url=PUBLIC_LINK)],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text(
        f"""
ЁЯОЙ <b>рж╕рзНржмрж╛ржЧрждржо, {user.first_name}!</b>

тЪая╕П ржЖржорж╛ржжрзЗрж░ ржкрж╛ржмрж▓рж┐ржХ ржПржмржВ ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржи,
рждрж╛рж░ржкрж░ ржирж┐ржЪрзЗрж░ <b>тЬЕ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи</b> ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред
""",
        reply_markup=reply_markup,
        parse_mode="HTML",
        disable_web_page_preview=True,
    )

# ===============================
# ЁЯОе ржнрж┐ржбрж┐ржУ ржХржорж╛ржирзНржб
# ===============================
async def vid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) == 0:
        await update.message.reply_html(
            "тЭМ <b>ржнрж┐ржбрж┐ржУ ржкрзНрж░ржорзНржкржЯ ржжрж┐ржи!</b>\n\nржЙржжрж╛рж╣рж░ржг:\n<code>/vid ржорж╛ржарзЗ ржжрзМржбрж╝рж╛ржЪрзНржЫрзЗ ржПржХржЯрж┐ ржШрзЛржбрж╝рж╛</code>"
        )
        return

    prompt = " ".join(context.args)
    chat_id = update.message.chat_id
    user = update.message.from_user
    generating = await update.message.reply_html("тП│ <i>ржнрж┐ржбрж┐ржУ рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗ...</i>")
    await context.bot.send_chat_action(chat_id=chat_id, action="upload_video")

    try:
        encoded_prompt = urllib.parse.quote(prompt)
        api_url = f"{VIDEO_API_URL}?prompt={encoded_prompt}"
        response = requests.get(api_url)
        data = response.json()

        if data.get("success"):
            video_url = data.get("url")
            caption = f"""
тЬЕ <b>ржнрж┐ржбрж┐ржУ рждрзИрж░рж┐ рж╕ржорзНржкржирзНржи!</b>

ЁЯСд <b>ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА:</b> {user.first_name}  
ЁЯУЭ <b>ржкрзНрж░ржорзНржкржЯ:</b> {prompt}  
ЁЯЫая╕П <b>рждрзИрж░рж┐ ржХрж░рзЗржЫрзЗржи:</b> SHADOW JOKER  
ЁЯФЧ <a href="{PUBLIC_LINK}">t.me/SHADOW_JOKER_CTH</a>
"""
            await context.bot.send_video(
                chat_id=chat_id,
                video=video_url,
                caption=caption,
                parse_mode="HTML",
            )
            await context.bot.delete_message(chat_id=chat_id, message_id=generating.message_id)
        else:
            await generating.edit_text("тЭМ ржнрж┐ржбрж┐ржУ рждрзИрж░рж┐ ржмрзНржпрж░рзНрже!", parse_mode="HTML")
    except Exception as e:
        logging.error(f"ржнрж┐ржбрж┐ржУ API рждрзНрж░рзБржЯрж┐: {e}")
        await generating.edit_text(f"тЭМ рждрзНрж░рзБржЯрж┐: {e}", parse_mode="HTML")

# ===============================
# ЁЯЦ╝я╕П ржЫржмрж┐ ржХржорж╛ржирзНржб
# ===============================
async def flux(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) == 0:
        await update.message.reply_html("тЭМ <b>ржЫржмрж┐ ржкрзНрж░ржорзНржкржЯ ржжрж┐ржи!</b>\n\nржЙржжрж╛рж╣рж░ржг:\n<code>/flux ржПржХржЯрж┐ рж╕рзБржирзНржжрж░ рж╢рж╣рж░</code>")
        return

    prompt = " ".join(context.args)
    chat_id = update.message.chat_id
    user = update.message.from_user
    generating = await update.message.reply_html("тП│ <i>ржЫржмрж┐ рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗ...</i>")
    await context.bot.send_chat_action(chat_id=chat_id, action="upload_photo")

    try:
        encoded_prompt = urllib.parse.quote(prompt)
        api_url = f"{IMAGE_API_URL}?prompt={encoded_prompt}&model=flux"
        response = requests.get(api_url)

        if response.status_code == 200:
            caption = f"""
тЬЕ <b>ржЫржмрж┐ рждрзИрж░рж┐ рж╕ржорзНржкржирзНржи!</b>

ЁЯСд <b>ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА:</b> {user.first_name}  
ЁЯУЭ <b>ржкрзНрж░ржорзНржкржЯ:</b> {prompt}  
ЁЯЫая╕П <b>рждрзИрж░рж┐ ржХрж░рзЗржЫрзЗржи:</b> SHADOW JOKER  
ЁЯФЧ <a href="{PUBLIC_LINK}">t.me/SHADOW_JOKER_CTH</a>
"""
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=response.content,
                caption=caption,
                parse_mode="HTML",
            )
            await context.bot.delete_message(chat_id=chat_id, message_id=generating.message_id)
        else:
            await generating.edit_text("тЭМ ржЫржмрж┐ рждрзИрж░рж┐ ржмрзНржпрж░рзНрже!", parse_mode="HTML")
    except Exception as e:
        logging.error(f"ржЫржмрж┐ API рждрзНрж░рзБржЯрж┐: {e}")
        await generating.edit_text(f"тЭМ рждрзНрж░рзБржЯрж┐: {e}", parse_mode="HTML")

# ===============================
# ЁЯЪА MAIN FUNCTION
# ===============================
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("vid", vid))
    app.add_handler(CommandHandler("flux", flux))

    app.add_handler(CallbackQueryHandler(verify_callback, pattern="verify"))
    app.add_handler(CallbackQueryHandler(about_callback, pattern="about"))
    app.add_handler(CallbackQueryHandler(back_to_start_menu, pattern="start_menu"))

    print("тЬЕ SHADOW BOT ржЪрж╛рж▓рзБ рж╣рзЯрзЗржЫрзЗ...")
    app.run_polling()

if __name__ == "__main__":
    main()
