from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import requests
import urllib.parse
import os
import logging # рж▓ржЧрж┐ржВ ржПрж░ ржЬржирзНржп ржирждрзБржи ржЗржорзНржкрзЛрж░рзНржЯ

# ржЖржкржирж╛рж░ рж▓ржЧрж┐ржВ рж╕рзЗржЯржЖржк ржХрж░рзБржи
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# ===============================
#          тЪЩя╕П рж╕рзЗржЯрж┐ржВрж╕ тЪЩя╕П
# ===============================
BOT_TOKEN = "8297848554:AAHVX8--wtbap_NEC4bIyjKReJ8b4Z7ebgU"
PRIVATE_CHANNEL_ID = "-1002172050092"  # ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ID
PUBLIC_CHANNEL_ID = "https://t.me/shadow_joker_cyberteamhelp"    # ржкрж╛ржмрж▓рж┐ржХ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржЗржЙржЬрж╛рж░ржирзЗржо (@ рж╕рж╣)
PRIVATE_INVITE = "https://t.me/+DLEo8TQ1PjIzYzFl" # ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ржЗржиржнрж╛ржЗржЯ рж▓рж┐ржВржХ
PUBLIC_LINK = "https://t.me/shadow_joker_cyberteamhelp" # ржкрж╛ржмрж▓рж┐ржХ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ рж▓рж┐ржВржХ
OWNER_ID = 6484972504 # ЁЯдЦ ржорж╛рж▓рж┐ржХрзЗрж░ ржЗржЙржЬрж╛рж░ ID (ржЖржкржирж╛рж░ ржЖржЗржбрж┐ ржжрж┐ржи)

# AI API ржПржирзНржбржкржпрж╝рзЗржирзНржЯ (ржпржжрж┐ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржЪрж╛ржи)
VIDEO_API_URL = "https://api.yabes-desu.workers.dev/ai/tool/txt2video"
IMAGE_API_URL = "https://text2img.hideme.eu.org/image"

# ===============================
#   /start ржХржорж╛ржирзНржб
# ===============================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user

    keyboard = [
        [InlineKeyboardButton("тЬЕ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи", callback_data="verify")],
        [InlineKeyboardButton("ЁЯдЦ About Bot", callback_data="about")], # ржирждрзБржи About ржмрж╛ржЯржи
        [InlineKeyboardButton("ЁЯСе ржЖржорж╛ржжрзЗрж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи", url=PUBLIC_LINK)] # ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЧрзНрж░рзБржк ржЬрзЯрзЗржи ржмрж╛ржЯржи
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # ржмрж╛ржВрж▓рж╛ ржПржмржВ ржЗржорзЛржЬрж┐ рж╕рж╣ ржЙржирзНржиржд /start ржорзЗрж╕рзЗржЬ
    await update.message.reply_html(
        f"""
ЁЯОЙ <b>рж╕рзНржмрж╛ржЧрждржо, {user.first_name}!</b>

тЪая╕П ржПржЗ ржмржЯржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЖржЧрзЗ ржЖржкржирж╛ржХрзЗ ржЕржмрж╢рзНржпржЗ ржЖржорж╛ржжрзЗрж░ ржжрзБржЯрж┐ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐рждрзЗ рж╣ржмрзЗ:

1я╕ПтГг <a href="{PUBLIC_LINK}">ржкрж╛ржмрж▓рж┐ржХ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржи</a>  
2я╕ПтГг <a href="{PRIVATE_INVITE}">ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржи</a>  

ржЙржнрзЯ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрзЗржУрзЯрж╛рж░ ржкрж░ ржирж┐ржЪрзЗ <b>тЬЕ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи</b> ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред
""",
        reply_markup=reply_markup,
        disable_web_page_preview=True
    )


# ===============================
#   тЬЕ ржпрж╛ржЪрж╛ржЗ ржмрж╛ржЯржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
# ===============================
async def verify_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user

    # ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛рж░ рж╕ржоржпрж╝ ржПржХржЯрж┐ рж▓рзЛржбрж┐ржВ ржЙрждрзНрждрж░ ржжрж┐ржи
    await query.answer("тМЫ ржЪрзНржпрж╛ржирзЗрж▓ рж╕ржжрж╕рзНржпрждрж╛ ржпрж╛ржЪрж╛ржЗ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", show_alert=False)

    try:
        # get_chat_member ржЕрзНржпрж╛рж╕рж┐ржЩрзНржХрзНрж░рзЛржирж╛рж╕ ржлрж╛ржВрж╢ржи, рждрж╛ржЗ await ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ
        private_member = await context.bot.get_chat_member(PRIVATE_CHANNEL_ID, user.id)
        public_member = await context.bot.get_chat_member(PUBLIC_CHANNEL_ID, user.id)

        # рж╕ржжрж╕рзНржпрждрж╛рж░ рж╕рзНржерж┐рждрж┐ ржпрж╛ржЪрж╛ржЗ
        if (
            private_member.status in ["member", "administrator", "creator"]
            and public_member.status in ["member", "administrator", "creator"]
        ):
            # ржпрж╛ржЪрж╛ржЗ рж╕ржлрж▓ рж╣рж▓рзЗ ржорзЗрж╕рзЗржЬ ржПржбрж┐ржЯ ржХрж░рзБржи
            await query.message.edit_text(
                f"""
тЬЕ <b>ржпрж╛ржЪрж╛ржЗ рж╕ржлрж▓!</b>

рж╕рзНржмрж╛ржЧрждржо {user.first_name} ЁЯе│  
ржЖржкржирж┐ ржПржЦржи ржирж┐ржЪрзЗрж░ ржХржорж╛ржирзНржбржЧрзБрж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи:

ЁЯОе <code>/vid ржЖржкржирж╛рж░ ржмрж░рзНржгржирж╛</code> тЖТ AI ржнрж┐ржбрж┐ржУ рждрзИрж░рж┐ ржХрж░рзБржи  
ЁЯЦ╝я╕П <code>/flux ржЖржкржирж╛рж░ ржмрж░рзНржгржирж╛</code> тЖТ AI ржЫржмрж┐ (Image) рждрзИрж░рж┐ ржХрж░рзБржи  

ЁЯСС <b>ржорж╛рж▓рж┐ржХ:</b> <a href="tg://user?id={OWNER_ID}">ржЖржорж╛рж░ ржорж╛рж▓рж┐ржХ</a>
ЁЯЫая╕П <b>рждрзИрж░рж┐ ржХрж░рзЗржЫрзЗржи:</b> <a href="https://t.me/code_predator_acs">Code Predator</a>
                """,
                parse_mode="HTML"
            )
        else:
            # ржпрж╛ржЪрж╛ржЗ ржмрзНржпрж░рзНрже рж╣рж▓рзЗ рж╕рждрж░рзНржХрждрж╛ ржорзЗрж╕рзЗржЬ ржжрж┐ржи
            await query.answer("тЭМ ржЖржкржирж╛ржХрзЗ ржЕржмрж╢рзНржпржЗ ржкрзНрж░ржержорзЗ ржЙржнржпрж╝ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐рждрзЗ рж╣ржмрзЗ!", show_alert=True)

    except Exception:
        # ржХрзЛржирзЛ рждрзНрж░рзБржЯрж┐ рж╣рж▓рзЗ (ржпрзЗржоржи: ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ID ржнрзБрж▓ рж╣рж▓рзЗ)
        await query.answer("тЭМ ржпрж╛ржЪрж╛ржЗрзЯрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ, ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ ID ржарж┐ржХ ржЖржЫрзЗ ржХрж┐ржирж╛ ржжрзЗржЦрзБржи!", show_alert=True)
        logging.error(f"ржпрж╛ржЪрж╛ржЗ рждрзНрж░рзБржЯрж┐: {user.id} ржЪрзНржпрж╛ржирзЗрж▓рзЗрж░ рж╕ржжрж╕рзНржпрждрж╛ ржпрж╛ржЪрж╛ржЗ ржХрж░рждрзЗ ржкрж╛рж░рзЗржирж┐ред")

# ===============================
#   ЁЯдЦ About Bot ржмрж╛ржЯржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
# ===============================
async def about_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    # ржорзВрж▓ ржорзЗржирзБрждрзЗ ржлрж┐рж░рзЗ ржпрж╛ржУрзЯрж╛рж░ ржмрж╛ржЯржи
    keyboard = [
        [InlineKeyboardButton("тмЕя╕П ржмрзНржпрж╛ржХ", callback_data="start_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        f"""
ЁЯМЯ <b>SHADOW  AI Bot рж╕ржорзНржкрж░рзНржХрзЗ:</b>

ржПржЗ ржмржЯржЯрж┐ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА AI ржоржбрзЗрж▓ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЯрзЗржХрзНрж╕ржЯ ржкрзНрж░ржорзНржкржЯ ржерзЗржХрзЗ ржжрзБрж░рзНржжрж╛ржирзНржд ржнрж┐ржбрж┐ржУ ржПржмржВ ржЫржмрж┐ рждрзИрж░рж┐ ржХрж░рждрзЗ ржкрж╛рж░рзЗред

- <b>ржнрж┐ржбрж┐ржУ ржоржбрзЗрж▓:</b> Sora-ржПрж░ ржорждрзЛ (API ржжрзНржмрж╛рж░рж╛ ржкрзНрж░рзЛржнрж╛ржЗржб ржХрж░рж╛)
- <b>ржЫржмрж┐ ржоржбрзЗрж▓:</b> Flux

ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ рж╢рж╛рж▓рзАржи ржПржмржВ рж╕ржарж┐ржХ ржкрзНрж░ржорзНржкржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред
ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ ржорж╛рж▓рж┐ржХрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред

ЁЯСС <b>ржорж╛рж▓рж┐ржХ:</b> <a href="tg://user?id={OWNER_ID}">ржЖржорж╛рж░ ржорж╛рж▓рж┐ржХ</a>
ЁЯЫая╕П <b>рждрзИрж░рж┐ ржХрж░рзЗржЫрзЗржи:</b> <a href="https://t.me/code_predator_acs">Code Predator</a>
""",
        parse_mode="HTML",
        reply_markup=reply_markup
    )

# ===============================
#   тмЕя╕П ржмрзНржпрж╛ржХ ржмрж╛ржЯржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (ржорзВрж▓ ржорзЗржирзБ)
# ===============================
async def back_to_start_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    
    # /start ржлрж╛ржВрж╢ржирзЗрж░ ржпрзБржХрзНрждрж┐ ржкрзБржирж░рж╛ржпрж╝ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
    keyboard = [
        [InlineKeyboardButton("тЬЕ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи", callback_data="verify")],
        [InlineKeyboardButton("ЁЯдЦ About Bot", callback_data="about")],
        [InlineKeyboardButton("ЁЯСе ржЖржорж╛ржжрзЗрж░ ржЧрзНрж░рзБржкрзЗ ржпрзЛржЧ ржжрж┐ржи", url=PUBLIC_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(
        f"""
ЁЯОЙ <b>рж╕рзНржмрж╛ржЧрждржо, {user.first_name}!</b>

тЪая╕П ржПржЗ ржмржЯржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛рж░ ржЖржЧрзЗ ржЖржкржирж╛ржХрзЗ ржЕржмрж╢рзНржпржЗ ржЖржорж╛ржжрзЗрж░ ржжрзБржЯрж┐ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐рждрзЗ рж╣ржмрзЗ:

1я╕ПтГг <a href="{PUBLIC_LINK}">ржкрж╛ржмрж▓рж┐ржХ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржи</a>  
2я╕ПтГг <a href="{PRIVATE_INVITE}">ржкрзНрж░рж╛ржЗржнрзЗржЯ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрж┐ржи</a>  

ржЙржнрзЯ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржпрзЛржЧ ржжрзЗржУрзЯрж╛рж░ ржкрж░ ржирж┐ржЪрзЗ <b>тЬЕ ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи</b> ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржиред
""",
        reply_markup=reply_markup,
        parse_mode="HTML",
        disable_web_page_preview=True
    )


# ===============================
#   ЁЯОе AI ржЯрзЗржХрзНрж╕ржЯ ржерзЗржХрзЗ ржнрж┐ржбрж┐ржУ ржХржорж╛ржирзНржб (/vid)
# ===============================
async def vid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) == 0:
        await update.message.reply_html("""
тЭМ <b>ржнрж┐ржбрж┐ржУ ржкрзНрж░ржорзНржкржЯ ржжрж┐ржи!</b>

ржЖржкржирж┐ ржпрзЗ ржнрж┐ржбрж┐ржУржЯрж┐ рждрзИрж░рж┐ ржХрж░рждрзЗ ржЪрж╛ржи рждрж╛рж░ ржПржХржЯрж┐ ржмрж░рзНржгржирж╛ ржжрж┐рждрзЗ рж╣ржмрзЗред
<b>ржЙржжрж╛рж╣рж░ржг:</b> <code>/vid ржорж╛ржарзЗ ржжрзМржбрж╝рж╛ржЪрзНржЫрзЗ ржПржХржЯрж┐ ржШрзЛржбрж╝рж╛</code>
""")
        return

    prompt = " ".join(context.args)
    chat_id = update.message.chat_id
    user = update.message.from_user

    generating = await update.message.reply_html("тП│ <i>ржЖржкржирж╛рж░ ржнрж┐ржбрж┐ржУ рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗ, ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи...</i>")
    await context.bot.send_chat_action(chat_id=chat_id, action="upload_video")

    try:
        encoded_prompt = urllib.parse.quote(prompt)
        api_url = f"{VIDEO_API_URL}?prompt={encoded_prompt}"

        response = requests.get(api_url)
        response.raise_for_status()
        data = response.json()

        if data.get("success"):
            video_url = data.get("url")
            caption = f"""
тЬЕ <b>рждрзИрж░рж┐ рж╕ржорзНржкржирзНржи!</b>

ЁЯСд <b>ржЬржирзНржп:</b> <a href='tg://user?id={user.id}'>{user.first_name}</a>
ЁЯТб <b>ржоржбрзЗрж▓:</b> Sora-like
ЁЯУЭ <b>ржкрзНрж░ржорзНржкржЯ:</b> {prompt}
ЁЯЪА <b>ржЕржмрж╕рзНржерж╛:</b> рж╕ржлрж▓ржнрж╛ржмрзЗ рждрзИрж░рж┐ рж╣рзЯрзЗржЫрзЗ!

ЁЯЫая╕П <b>рждрзИрж░рж┐ ржХрж░рзЗржЫрзЗржи:</b> <a href="t.me/SHADOW_JOKER_CTH">SHADOW JOKER</a>
"""
            await context.bot.send_video(
                chat_id=chat_id,
                video=video_url,
                caption=caption,
                parse_mode="HTML",
                reply_to_message_id=update.message.message_id
            )
            # ржЬрзЗржирж╛рж░рзЗржЯрж┐ржВ ржорзЗрж╕рзЗржЬржЯрж┐ ржбрж┐рж▓рж┐ржЯ ржХрж░рзБржи
            await context.bot.delete_message(chat_id=chat_id, message_id=generating.message_id)
        else:
            await generating.edit_text("тЭМ <b>ржнрж┐ржбрж┐ржУ рждрзИрж░рж┐ ржмрзНржпрж░рзНрже!</b>\n\nржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред", parse_mode="HTML")

    except Exception as e:
        logging.error(f"ржнрж┐ржбрж┐ржУ рждрзИрж░рж┐рж░ API рждрзНрж░рзБржЯрж┐: {e}")
        await generating.edit_text(f"тЭМ <b>ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ рж╣рзЯрзЗржЫрзЗ!</b>\n\n<i>ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд:</i> {e}", parse_mode="HTML")


# ===============================
#   ЁЯЦ╝я╕П AI ржЯрзЗржХрзНрж╕ржЯ ржерзЗржХрзЗ ржЫржмрж┐ ржХржорж╛ржирзНржб (/flux)
# ===============================
async def flux(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) == 0:
        await update.message.reply_html("тЭМ <b>ржЫржмрж┐ ржкрзНрж░ржорзНржкржЯ ржжрж┐ржи!</b>\n\nржжрзЯрж╛ ржХрж░рзЗ /flux ржХржорж╛ржирзНржбрзЗрж░ ржкрж░рзЗ ржПржХржЯрж┐ ржмрж░рзНржгржирж╛ рж▓рж┐ржЦрзБржиред")
        return

    prompt = " ".join(context.args)
    chat_id = update.message.chat_id
    user = update.message.from_user

    generating = await update.message.reply_html("тП│ <i>ржЖржкржирж╛рж░ ржЫржмрж┐ рждрзИрж░рж┐ рж╣ржЪрзНржЫрзЗ, ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи...</i>")
    await context.bot.send_chat_action(chat_id=chat_id, action="upload_photo")

    try:
        encoded_prompt = urllib.parse.quote(prompt)
        # ржЫржмрж┐рж░ ржЬржирзНржп API ржХрж▓
        api_url = f"{IMAGE_API_URL}?prompt={encoded_prompt}&model=flux"

        response = requests.get(api_url)
        response.raise_for_status() # HTTP рждрзНрж░рзБржЯрж┐ рж╣рж▓рзЗ Exception ржжрзЗржЦрж╛ржмрзЗ

        if response.status_code == 200:
            caption = f"""<b>тЬЕ рждрзИрж░рж┐ рж╕ржорзНржкржирзНржи!</b>

ЁЯСд <b>ржЬржирзНржп:</b> <a href='tg://user?id={user.id}'>{user.first_name}</a>
ЁЯТб <b>ржоржбрзЗрж▓:</b> Flux
ЁЯУЭ <b>ржкрзНрж░ржорзНржкржЯ:</b> {prompt}
ЁЯЪА <b>ржЕржмрж╕рзНржерж╛:</b> рж╕ржлрж▓ржнрж╛ржмрзЗ рждрзИрж░рж┐ рж╣рзЯрзЗржЫрзЗ!

ЁЯЫая╕П <b>рждрзИрж░рж┐ ржХрж░рзЗржЫрзЗржи:</b> <a href="https://t.me/code_predator_acs">Code Predator</a>
"""
            # ржмрж╛ржЗржирж╛рж░рж┐ ржХржирзНржЯрзЗржирзНржЯ рж╕рж░рж╛рж╕рж░рж┐ send_photo рждрзЗ ржкрж╛ржарж╛ржи
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=response.content,
                caption=caption,
                parse_mode="HTML",
                reply_to_message_id=update.message.message_id
            )
            # ржЬрзЗржирж╛рж░рзЗржЯрж┐ржВ ржорзЗрж╕рзЗржЬржЯрж┐ ржбрж┐рж▓рж┐ржЯ ржХрж░рзБржи
            await context.bot.delete_message(chat_id=chat_id, message_id=generating.message_id)
        else:
            await generating.edit_text(f"тЭМ ржЫржмрж┐ рждрзИрж░рж┐ ржмрзНржпрж░рзНрже рж╣рж▓рзЛ (рж╕рзНржерж┐рждрж┐ ржХрзЛржб: {response.status_code})ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред", parse_mode="HTML")

    except Exception as e:
        logging.error(f"ржЫржмрж┐ рждрзИрж░рж┐рж░ API рждрзНрж░рзБржЯрж┐: {e}")
        await generating.edit_text(f"тЭМ ржЫржмрж┐ рждрзИрж░рж┐рж░ рж╕ржорзЯ ржПржХржЯрж┐ рждрзНрж░рзБржЯрж┐ рж╣рзЯрзЗржЫрзЗред\n\n{e}", parse_mode="HTML")


# ===============================
#        ЁЯЪА ржорзЗржЗржи ржлрж╛ржВрж╢ржи ЁЯЪА
# ===============================
def main():
    # ApplicationBuilder ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржмржЯ рждрзИрж░рж┐ ржХрж░рзБржи
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзЛржЧ ржХрж░рзБржи
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("vid", vid))
    app.add_handler(CommandHandler("flux", flux))
    
    # CallbackQuery рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзЛржЧ ржХрж░рзБржи (ржмрж╛ржЯржи ржХрзНрж▓рж┐ржХрзЗрж░ ржЬржирзНржп)
    app.add_handler(CallbackQueryHandler(verify_callback, pattern="verify"))
    app.add_handler(CallbackQueryHandler(about_callback, pattern="about")) # About ржмрж╛ржЯржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    app.add_handler(CallbackQueryHandler(back_to_start_menu, pattern="start_menu")) # ржмрзНржпрж╛ржХ ржмрж╛ржЯржи рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░

    print("тЬЕ Predator AI Bot ржЪрж╛рж▓рзБ рж╣рзЯрзЗржЫрзЗ...")
    
    # ржмржЯ ржкрзЛрж▓рж┐ржВ рж╢рзБрж░рзБ ржХрж░рзБржи
    app.run_polling()


if __name__ == "__main__":
    main()